// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BASE_YASE_DEF_H_
#define FLATBUFFERS_GENERATED_BASE_YASE_DEF_H_

#include "flatbuffers/flatbuffers.h"

namespace YASE {
namespace def {

struct Vec3;

struct CameraPosition;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) CameraPosition FLATBUFFERS_FINAL_CLASS {
 private:
  Vec3 front_;
  Vec3 direction_;
  Vec3 high_;

 public:
  CameraPosition() {
    memset(this, 0, sizeof(CameraPosition));
  }
  CameraPosition(const Vec3 &_front, const Vec3 &_direction, const Vec3 &_high)
      : front_(_front),
        direction_(_direction),
        high_(_high) {
  }
  const Vec3 &front() const {
    return front_;
  }
  const Vec3 &direction() const {
    return direction_;
  }
  const Vec3 &high() const {
    return high_;
  }
};
FLATBUFFERS_STRUCT_END(CameraPosition, 36);

}  // namespace def
}  // namespace YASE

#endif  // FLATBUFFERS_GENERATED_BASE_YASE_DEF_H_
